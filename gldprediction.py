# -*- coding: utf-8 -*-
"""gldprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-7KntBpXwXImSdczqFZ2cmj0Yzb915U
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from PIL import Image
from sklearn.metrics import accuracy_score,r2_score

gold_data=pd.read_csv('gld_price_data.csv')

gold_data.head()

gold_data.tail()

gold_data.shape

gold_data.info()

# checking the number of missing values
gold_data.isnull().sum()

#getting the statistical measures of the data
gold_data.describe()

# Convert the date column to datetime objects
gold_data['Date'] = pd.to_datetime(gold_data['Date'])
# Now calculate the correlation on the numerical columns
correlation = gold_data.corr()
print(correlation)

plt.figure(figsize=(8,8))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Reds')

#correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD Price
sns.distplot(gold_data['GLD'],color='red')

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2)
reg=RandomForestRegressor()
reg.fit(X_train,Y_train)
pred=reg.predict(X_test)
print(pred)

# R squared error
error_score = metrics.r2_score(Y_test, pred)
print("R squared error : ", error_score)
Y_test = list(Y_test)
plt.plot(Y_test, color='blue', label = 'Actual Value')
plt.plot(pred, color='red', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()


st.title('Gold Price Model')
img = Image.open('goldbar1.jpg')
st.image(img,width=200,use_column_width=True)
st.subheader('Using randomforestregressor')
st.subheader('Actual Data')
st.write(gold_data)
st.subheader('Predicted Data')
st.write(pred)
st.subheader('Model Performance')
st.write(error_score)
img1 = Image.open('download (5).png')
st.subheader('Model Performance HeatMap')
st.image(img1,width=50,use_column_width=True)
st.subheader('Actual Value VS Predicted Value')
img2=Image.open('download.png')
st.image(img2,width=50,use_column_width=True)